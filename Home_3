Ссылка на набор данных:
https://drive.google.com/file/d/1MoBVL6F3sv0NyQ2mhbzzHgNjqJgiyr9/view?usp=sharing
Один из способов повысить эффективность взаимодействия банка с клиентами —
отправлять предложение о новой услуге не всем клиентам, а только некоторым,
которые выбираются по принципу наибольшей склонности к отклику на это
предложение.
Задача заключается в том, чтобы предложить алгоритм, который будет выдавать
склонность клиента к положительному или отрицательному отклику на
предложение банка. Предполагается, что, получив такие оценки для некоторого
множества клиентов, банк обратится с предложением только к тем, от кого
ожидается положительный отклик.
Создайте модель линейной регрессии, которая бы оценивала лояльность
пользователей к отклику.
Пояснения к признакам набора данных:
- AGREEMENT_RK — уникальный идентификатор объекта в выборке;
- TARGET — целевая переменная: отклик на маркетинговую кампанию (1 — отклик
был зарегистрирован, 0 — отклика не было);
- AGE — возраст клиента;
- SOCSTATUS_WORK_FL — социальный статус клиента относительно работы (1 —
работает, 0 — не работает);
- SOCSTATUS_PENS_FL — социальный статус клиента относительно пенсии (1 —
пенсионер, 0 — не пенсионер);
- GENDER — пол клиента (1 — мужчина, 0 — женщина);
7
- CHILD_TOTAL — количество детей клиента;
- DEPENDANTS — количество иждивенцев клиента;
- PERSONAL_INCOME — личный доход клиента (в рублях);
- LOAN_NUM_TOTAL — количество ссуд клиента;
- LOAN_NUM_CLOSED — количество погашенных ссуд клиента.

import pandas as pd
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
# Загрузка данных
data = pd.read_csv("credit_default.csv")
# Разделение данных на признаки (X) и целевую переменную (y)
X = data.drop("default", axis=1)
y = data["default"]
# Разделение данных на обучающую и тестовую выборки
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
# Создание и обучение модели логистической регрессии
model = LogisticRegression()
model.fit(X_train, y_train)
# Предсказание вероятности дефолта для тестовых данных
y_pred_proba = model.predict_proba(X_test)[:, 1]
# Оценка точности предсказания модели
accuracy = accuracy_score(y_test, y_pred_proba.round())
print(f"Точность модели: {accuracy}")
